# mastodon_bot.py
import os
from mastodon import Mastodon, StreamListener
from dotenv import load_dotenv
import re
import time

# Import h√†m x·ª≠ l√Ω ch√≠nh t·ª´ file ƒë√£ t√°i c·∫•u tr√∫c
from main_refactored import find_best_candidates

# --- C·∫•u h√¨nh ---
load_dotenv()
MASTODON_CLIENT_KEY = os.getenv("MASTODON_CLIENT_KEY")
MASTODON_CLIENT_SECRET = os.getenv("MASTODON_CLIENT_SECRET")
MASTODON_ACCESS_TOKEN = os.getenv("MASTODON_ACCESS_TOKEN")
# L·∫•y URL instance t·ª´ file .env ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
MASTODON_API_BASE_URL = os.getenv("MASTODON_API_BASE_URL", "https://mastodonuet.duckdns.org/")
LISTEN_HASHTAG = "tuyendungAI" # Hashtag ƒë·ªÉ bot l·∫Øng nghe

# --- Kh·ªüi t·∫°o API ---
mastodon = Mastodon(
    client_id=MASTODON_CLIENT_KEY,
    client_secret=MASTODON_CLIENT_SECRET,
    access_token=MASTODON_ACCESS_TOKEN,
    api_base_url=MASTODON_API_BASE_URL
)

# --- L·ªõp l·∫Øng nghe s·ª± ki·ªán t·ª´ Mastodon ---
class RecruitmentListener(StreamListener):
    def on_update(self, status):
        # Ki·ªÉm tra xem b√†i ƒëƒÉng c√≥ ph·∫£i l√† c·ªßa ch√≠nh bot kh√¥ng ƒë·ªÉ tr√°nh l·∫∑p v√¥ h·∫°n
        try:
            my_username = mastodon.me()['username']
            if status['account']['username'] == my_username:
                return
        except Exception as e:
            print(f"L·ªói khi l·∫•y th√¥ng tin bot: {e}")
            return # B·ªè qua n·∫øu kh√¥ng th·ªÉ x√°c th·ª±c

        # Ki·ªÉm tra xem b√†i ƒëƒÉng c√≥ ch·ª©a hashtag kh√¥ng
        hashtags = [tag['name'] for tag in status['tags']]
        if LISTEN_HASHTAG.lower() in [h.lower() for h in hashtags]:
            print(f"üî• Ph√°t hi·ªán b√†i ƒëƒÉng tuy·ªÉn d·ª•ng t·ª´ @{status['account']['acct']}")

            # Tr√≠ch xu·∫•t n·ªôi dung JD (lo·∫°i b·ªè HTML tags v√† hashtag)
            jd_text = re.sub(r'<.*?>', '', status['content']).strip()
            jd_text = jd_text.replace(f"#{LISTEN_HASHTAG}", "").strip()


            # L·∫•y th√¥ng tin ng∆∞·ªùi ƒëƒÉng ƒë·ªÉ g·ª≠i DM
            poster_account = status['account']

            # G·ª≠i tin nh·∫Øn x√°c nh·∫≠n
            mastodon.status_post(
                f"@{poster_account['acct']} ƒê√£ nh·∫≠n y√™u c·∫ßu tuy·ªÉn d·ª•ng. B·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch v√† s√†ng l·ªçc. Vui l√≤ng ch·ªù k·∫øt qu·∫£ trong DM!",
                in_reply_to_id=status['id']
            )

            try:
                # G·ªçi h√†m x·ª≠ l√Ω c·ªët l√µi
                print(f"   > ƒêang x·ª≠ l√Ω JD: {jd_text[:100]}...")
                final_ranking = find_best_candidates(jd_text)
                
                # ===================================================================
                # PH·∫¶N S·ª¨A ƒê·ªîI CH√çNH - G·ª¨I NHI·ªÄU DM THAY V√å M·ªòT
                # ===================================================================
                
                if not final_ranking:
                    # G·ª≠i m·ªôt DM n·∫øu kh√¥ng t√¨m th·∫•y ·ª©ng vi√™n n√†o
                    mastodon.status_post(
                        f"@{poster_account['acct']} R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y ·ª©ng vi√™n ph√π h·ª£p n√†o trong c∆° s·ªü d·ªØ li·ªáu.",
                        visibility='direct'
                    )
                else:
                    # 1. G·ª≠i tin nh·∫Øn gi·ªõi thi·ªáu ƒë·∫ßu ti√™n
                    mastodon.status_post(
                        f"@{poster_account['acct']} ‚úÖ ƒê√£ x·ª≠ l√Ω xong! D∆∞·ªõi ƒë√¢y l√† b·∫£ng x·∫øp h·∫°ng c√°c ·ª©ng vi√™n ph√π h·ª£p nh·∫•t:",
                        visibility='direct'
                    )
                    time.sleep(1) # Ch·ªù 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± tin nh·∫Øn

                    # 2. L·∫∑p qua t·ª´ng ·ª©ng vi√™n v√† g·ª≠i m·ªôt DM ri√™ng cho m·ªói ng∆∞·ªùi
                    for i, result in enumerate(final_ranking):
                        eval_data = result['detailed_evaluation']
                        
                        # T·∫°o n·ªôi dung tin nh·∫Øn cho CH·ªà M·ªòT ·ª©ng vi√™n
                        # Tin nh·∫Øn n√†y s·∫Ω ng·∫Øn v√† kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n
                        single_result_message = (
                            f"üèÜ H·∫†NG {i+1}: {result.get('name', 'N/A')}\n"
                            f"ƒêi·ªÉm: {eval_data.get('score', 'N/A')}/100\n"
                            f"ƒê√°nh gi√° kinh nghi·ªám: {eval_data.get('experience_match', 'N/A')}\n\n"
                            f"L√Ω do: {eval_data.get('rationale', 'N/A')}"
                        )
                        
                        # G·ª≠i DM cho ·ª©ng vi√™n n√†y
                        mastodon.status_post(
                            f"@{poster_account['acct']} {single_result_message}",
                            visibility='direct' # Quan tr·ªçng: ch·ªâ g·ª≠i cho ng∆∞·ªùi nh·∫≠n!
                        )
                        print(f"   > ƒê√£ g·ª≠i DM cho H·∫°ng {i+1}: {result.get('name')}")
                        time.sleep(1) # Ch·ªù gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh b·ªã coi l√† spam

                print(f"‚úÖ ƒê√£ g·ª≠i to√†n b·ªô k·∫øt qu·∫£ DM cho @{poster_account['acct']}")

            except Exception as e:
                print(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
                mastodon.status_post(
                    f"@{poster_account['acct']} R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.",
                    visibility='direct'
                )

# --- Ch·∫°y bot ---
if __name__ == "__main__":
    try:
        my_info = mastodon.me()
        print(f"ü§ñ Bot tuy·ªÉn d·ª•ng '{my_info['display_name']}' (@{my_info['username']}) ƒëang ch·∫°y...")
        print(f"   > L·∫Øng nghe hashtag #{LISTEN_HASHTAG} tr√™n instance {MASTODON_API_BASE_URL}")
        # L·∫Øng nghe c√°c b√†i ƒëƒÉng c√¥ng khai c√≥ ch·ª©a hashtag
        mastodon.stream_hashtag(LISTEN_HASHTAG, RecruitmentListener(), reconnect_async=True)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Mastodon. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin trong file .env")
        print(f"   > L·ªói chi ti·∫øt: {e}")